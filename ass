#!/bin/bash

umask "077"
set -o pipefail
set +x
set -f

# default color definitions
C_WARN="3"
C_ERR="1"
C_OK="2"
C_PASS="6"
C_ENAME="10"
C_TITLE="13"
C_BORDER="5"
C_BUTTON="2"
C_TREE="10"
C_CURSOR="15"
S_WIDTH="60"
# import custom colors
[[ -f "$HOME/.config/ass/colors" ]] && source "$HOME/.config/ass/colors"

PREFIX="${ASS_DIRECTORY:-$HOME/.ass}"
TIMEOUT="${ASS_COPY_TIME:-15}"
KEYFILE="${ASS_AGE_KEYFILE:-$PREFIX/.key.age}"

recipientfile="$PREFIX/.recipient.txt"

PROGRAM="${0##*/}"

init() {
  local nopass
  clear
  gum style --foreground "$C_TITLE" --border-foreground "$C_BORDER" --border double --align center --width "$S_WIDTH" --margin "1 2" --padding "2 4" 'Age Secret Store' 'No more pain in ass!'
  gum confirm --prompt.margin "0 2" --selected.background "$C_BUTTON" "Create password protected keyfile?"
  nopass="$?"
  if [[ -e "$KEYFILE" ]]
  then
    if [[ "$nopass" == 0 ]]
    then
      age -d "$KEYFILE" | age-keygen -y > "$recipientfile" || exit 1
    else
      age-keygen -y "$KEYFILE" > "$recipientfile" || exit 1
    fi
  else
    mkdir -p "$(dirname "$KEYFILE")"
    if [[ "$nopass" == 0 ]]
    then
      age-keygen 2> "$recipientfile" | age -a -p > "$KEYFILE"
      cut -f 2 -d ':' "$recipientfile" | tr -d " " | tee "$recipientfile" > /dev/null
      gum input --cursor.foreground "$C_CURSOR" --placeholder "Press enter when you remember password"
    else
      age-keygen -o "$KEYFILE" 2> /dev/null
      age-keygen -y "$KEYFILE" > "$recipientfile"
    fi
  fi
  FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_OK" "Age Secret Store initialized succesfully")"
}

add() {
  local passgen
  clear
  gum style --foreground "$C_TITLE" --border-foreground "$C_BORDER" --border double --align center --width "$S_WIDTH" --margin "1 2" --padding "2 4" "$(gum style --bold "Age Secret Store")" 'No more pain in ass!'
  entry=$(gum input --cursor.foreground "$C_CURSOR" --placeholder "Enter entry name")
  if [[ -z "$entry" ]]
  then
    FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_WARN" --bold "Entry name cannot be empty.")"
    return
  fi
  if [[ -e "$PREFIX/$entry" ]]
  then
    if ! gum confirm --prompt.margin "0 2" --selected.background "$C_BUTTON" "$(gum style --foreground "$C_ENAME" "$entry") exist, do you want overwrite it?"
    then
      return
    fi
  fi
  gum confirm --prompt.margin "0 2" --selected.background "$C_BUTTON" "Do you want autogenerate password?"
  passgen="$?"
  if [[ "$passgen" == 1 ]]
  then
    password=$(gum input --cursor.foreground "$C_CURSOR" --placeholder "Enter password for $(gum style --foreground "$C_ENAME" "$entry")" --password)
    password_again=$(gum input --cursor.foreground "$C_CURSOR" --placeholder "Retype password for $(gum style --foreground "$C_ENAME" "$entry")" --password)
    if [[ "$password" == "$password_again" ]]
    then
      mkdir -p "$PREFIX/$(dirname "$entry")"
      echo "$password" | age -e -R "$recipientfile" > "$PREFIX/$entry" || exit 1
    else
      FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_WARN" --bold "Passwords do not match. Entry not added.")"
      return
    fi
  else
    mkdir -p "$PREFIX/$(dirname "$entry")"
    passgen | age -e -R "$recipientfile" > "$PREFIX/$entry" || exit 1
  fi
  FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_OK" "Password for $(gum style --foreground "$C_ENAME" "$entry") $(gum style --foreground "$C_OK" "added.")")"
}

show() {
  local choice
  clear
  gum style --foreground "$C_TITLE" --border-foreground "$C_BORDER" --border double --align center --width "$S_WIDTH" --margin "1 2" --padding "2 4" "$(gum style --bold "Age Secret Store")" 'No more pain in ass!'
  [[ -e "$KEYFILE" ]] || killme "ERROR: Keyfile not exist."
  if [[ -z "$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null)" ]]
  then
    FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_WARN" --bold "Age Secret Store is empty!")"
  else
    choice=$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null | sed -e "s#${PREFIX}/\{0,1\}##" | sort | gum filter --indicator.foreground "$C_OK" --prompt.foreground "$C_OK" --match.foreground "$C_OK")
    gum style --margin "0 2" --bold "The content of $(gum style --foreground "$C_ENAME" "$choice"):"
    gum style --foreground "$C_PASS" --align left --width "$S_WIDTH" --margin "1 2" --padding "0 2" "$(age -d -i "$KEYFILE" "$PREFIX/$choice")"
    gum input --cursor.foreground "$C_CURSOR" --placeholder "Press enter when you read password"
  fi
}

copy() {
  local choice
  [[ -e "$KEYFILE" ]] || killme "ERROR: Keyfile not exist."
  if [[ -z "$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null)" ]]
  then
    FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_WARN" --bold "Age Secret Store is empty!")"
  else
    choice=$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null | sed -e "s#${PREFIX}/\{0,1\}##" | sort | gum filter --indicator.foreground "$C_OK" --prompt.foreground "$C_OK" --match.foreground "$C_OK")
    just_copy "$(age -d -i "$KEYFILE" "$PREFIX/$choice")" "$choice" || exit 1
  fi
}

just_copy() {
  local options protect=0 tmout="$TIMEOUT"
  options="$(getopt -o p -l protect -n "$PROGRAM" -- "$@")"
  eval set -- "$options"
  while true
  do
    case "$1" in
      -p|--protect) protect=1; shift ;;
      --) shift; break
    esac
  done
  if [[ "$XDG_SESSION_DESKTOP" == KDE ]]
  then
    qdbus org.kde.klipper /klipper org.kde.klipper.klipper.setClipboardContents "$1"
    while [[ "$tmout" -ge 1 ]]
    do
      if [[ "$protect" == 0 ]]
      then
        echo -ne "$(gum style --margin "0 0 0 2" "$(gum style --foreground "$C_ENAME" "$2") copied, clipboard will reset in $(gum style --foreground "$C_OK" "$tmout") second")\033[0K\r"
      else
        echo -ne "$(gum style --margin "0 0 0 2" "Password copied, clipboard will reset in $(gum style --foreground "$C_OK" "$tmout") second")\033[0K\r"
      fi
      sleep 1
      (( tmout-- ))
    done
    qdbus org.kde.klipper /klipper org.kde.klipper.klipper.clearClipboardHistory
  elif [[ "$XDG_SESSION_TYPE" == wayland ]]
  then
    command -v wl-copy &> /dev/null || gum style --margin "0 0 0 2" --foreground "$C_WARN" --bold "ERROR: Clipboard unupported" && return
    wl-copy "$1"
    while [[ "$tmout" -ge 1 ]]
    do
      if [[ "$protect" == 0 ]]
      then
        echo -ne "$(gum style --margin "0 0 0 2" "$(gum style --foreground "$C_ENAME" "$2") copied, clipboard will reset in $(gum style --foreground "$C_OK" "$tmout") second")\033[0K\r"
      else
        echo -ne "$(gum style --margin "0 0 0 2" "Password copied, clipboard will reset in $(gum style --foreground "$C_OK" "$tmout") second")\033[0K\r"
      fi
      sleep 1
      (( tmout-- ))
    done
    wl-copy -c
  elif [[ "$XDG_SESSION_TYPE" == x11 ]]
  then
    command -v xclip &> /dev/null || gum style --margin "0 0 0 2" --foreground "$C_WARN" --bold "ERROR: Clipboard unupported" && return
    command -v xsel &> /dev/null || gum style --margin "0 0 0 2" --foreground "$C_WARN" --bold "ERROR: Clipboard unupported" && return
    xclip -selection clipboard "$1"
    while [[ "$tmout" -ge 1 ]]
    do
      if [[ "$protect" == 0 ]]
      then
        echo -ne "$(gum style --margin "0 0 0 2" "$(gum style --foreground "$C_ENAME" "$2") copied, clipboard will reset in $(gum style --foreground "$C_OK" "$tmout") second")\033[0K\r"
      else
        echo -ne "$(gum style --margin "0 0 0 2" "Password copied, clipboard will reset in $(gum style --foreground "$C_OK" "$tmout") second")\033[0K\r"
      fi
      sleep 1
      (( tmout-- ))
    done
    xsel -cb
  fi
  FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_OK" --bold "Clipboard cleared")"
}

remove() {
  clear
  gum style --foreground "$C_TITLE" --border-foreground "$C_BORDER" --border double --align center --width "$S_WIDTH" --margin "1 2" --padding "2 4" "$(gum style --bold "Age Secret Store")" 'No more pain in ass!'
  if [[ -z "$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null)" ]]
  then
    FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_WARN" --bold "Age Secret Store is empty! Cannot remove anything!")"
  else
    choice=$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null | sed -e "s#${PREFIX}/\{0,1\}##" | sort | gum filter --indicator.foreground "$C_OK" --prompt.foreground "$C_OK" --match.foreground "$C_OK")
    if gum confirm --prompt.margin "0 2" --selected.background "$C_BUTTON" "Are you sure you want remove $(gum style --foreground "$C_ENAME" "$choice")"
    then
      assfile="$PREFIX/$choice"
      rm -f "$assfile"
      rmdir --ignore-fail-on-non-empty -p "${assfile%/*}" 2> /dev/null
      FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_OK" --bold "Entry removed!")"
    else
      FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_OK" --bold "Entry not removed")"
    fi
  fi
}

list() {
  clear
  gum style --foreground "$C_TITLE" --border-foreground "$C_BORDER" --border double --align center --width "$S_WIDTH" --margin "1 2" --padding "2 4" "$(gum style --bold "Age Secret Store")" 'No more pain in ass!'
  gum style --margin "0 0 0 2" --foreground "$C_TITLE" --bold "Age Secret Store"
  gum style --margin "0 0 0 2" --foreground "$C_TREE" "$(tree -N -n -l --noreport "$PREFIX" | tail -n +2)"
  gum input --cursor.foreground "$C_CURSOR" --placeholder "Press enter..."
}

passgen() {
  local length=20 pwgenopts="-y"
  gum confirm --prompt.margin "0 2" --selected.background "$C_BUTTON" "Include special characters to password?" || pwgenopts=""
  length=$(gum input --cursor.foreground "$C_CURSOR" --prompt "$(gum style --margin "0 0 0 2" --bold "Password lenghth: ")" --value "$length")
  while ! [[ $length =~ ^[0-9]+$ ]]
  do
    length=$(gum input --cursor.foreground "$C_CURSOR" --prompt "$(gum style --margin "0 0 0 2" --bold "Password lenghth: ")" --placeholder "Password length must be a number")
  done
  pwgen -1s "$pwgenopts" "$length"
}

killme() {
  >&2 gum style --margin "0 0 0 2" --foreground "$C_ERR" --bold "$1"
  exit 1
}

editor() {
  local choice secret
  clear
  gum style --foreground "$C_TITLE" --border-foreground "$C_BORDER" --border double --align center --width "$S_WIDTH" --margin "1 2" --padding "2 4" "$(gum style --bold "Age Secret Store")" 'No more pain in ass!'
  [[ -e "$KEYFILE" ]] || killme "ERROR: Keyfile not exist."
  if [[ -z "$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null)" ]]
  then
    FEEDBACK="$(gum style --margin "0 0 1 2" --foreground "$C_WARN" --bold "Age Secret Store is empty!")"
  else
    choice=$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null | sed -e "s#${PREFIX}/\{0,1\}##" | sort | gum filter --indicator.foreground "$C_OK" --prompt.foreground "$C_OK" --match.foreground "$C_OK")
    secret="$(gum write --cursor.foreground "$C_CURSOR" --width "$S_WIDTH" --value "$(age -d -i "$KEYFILE" "$PREFIX/$choice")")"
    echo "$secret" | age -e -R "$recipientfile" > "$PREFIX/$choice" || exit 1
    FEEDBACK="$(gum style --margin "0 0 1 2" "$(gum style --bold --foreground "$C_ENAME" "$choice") $(gum style --bold --foreground "$C_OK" "changed.")")"
  fi
}

show_title() {
  clear
  gum style --foreground "$C_TITLE" --border-foreground "$C_BORDER" --border double --align center --width "$S_WIDTH" --margin "1 2" --padding "2 4" "$(gum style --bold "Age Secret Store")" 'No more pain in ass!'
}

############# Main program #####################

[[ -e "$PREFIX" ]] || init
while true
do
  show_title
  if [[ -n "$FEEDBACK" ]]
  then
    echo "$FEEDBACK"
    FEEDBACK=""
  fi
  case $(gum choose --cursor.foreground "$C_OK" "Add password" "Show password" "Copy password" "Edit password" "Remove password" "List entries" "Destroy Age Secret Store" "Generate password" "Exit")
  in
    "Add password") add ;;
    "Show password") show ;;
    "Copy password")
      show_title
      copy ;;
    "Remove password") remove ;;
    "List entries") list ;;
    "Destroy Age Secret Store")
      show_title
      gum confirm --prompt.margin "0 2" --selected.background "$C_BUTTON" --prompt.foreground "$C_ERR" "Are you absolutely sure you want remove all Age Secret Store?" && rm -r -f -v "$PREFIX" && exit 0 || FEEDBACK="$(gum style --margin "0 0 1 2" --bold --foreground "$C_OK" "Operation cancelled.")"
      ;;
    "Generate password")
      show_title
      just_copy -p "$(passgen)"
      ;;
    "Edit password") editor ;;
    *) clear; exit 0
  esac
done
