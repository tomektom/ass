#!/bin/bash

umask "077"
set -o pipefail
set +x
set -f

PREFIX="${ASS_DIRECTORY:-$HOME/.ass}"
TIMEOUT="${ASS_COPY_TIME:-15}"
KEYFILE="${ASS_AGE_KEYFILE:-$PREFIX/.key.age}"

recipientfile="$PREFIX/.recipient.txt"

PROGRAM="${0##*/}"

init() {
  local nopass
  clear
  gum style --foreground 333 --border-foreground 212 --border double --align center --width 50 --margin "1 2" --padding "2 4" 'Age Secret Store' 'No more pain in ass!'
  if ! gum confirm "You don't have Age Secret Store. Create new?"
  then
    killme "ERROR: You must create Age Secret Store to use this program."
  fi
  gum confirm "Create password protected keyfile?"
  nopass="$?"
  if [[ ! -e "$PREFIX" ]]
  then
    mkdir -p "$PREFIX"
  else
    killme "ERROR: $PREFIX exist. Remove $PREFIX or choose other location in ASS_DIRECTORY."
  fi
  if [[ -e "$KEYFILE" ]]
  then
    if [[ "$nopass" == 0 ]]
    then
      age -d "$KEYFILE" | age-keygen -y > "$recipientfile" || exit 1
    else
      age-keygen -y "$KEYFILE" > "$recipientfile" || exit 1
    fi
  else
    mkdir -p "$(dirname "$KEYFILE")"
    if [[ "$nopass" == 0 ]]
    then
      age-keygen 2> "$recipientfile" | age -a -p > "$KEYFILE"
      cut -f 2 -d ':' "$recipientfile" | tr -d " " | tee "$recipientfile" > /dev/null
    else
      age-keygen -o "$KEYFILE" 2> /dev/null
      age-keygen -y "$KEYFILE" > "$recipientfile"
    fi
  fi
  gum style --foreground 333 "Age Secret Store initialized succesfully"
  gum input
}

add() {
  local passgen
  entry=$(gum input --placeholder "Enter entry name")
  if [[ -e "$PREFIX/$entry" ]]
  then
    if ! gum confirm "$(gum style --foreground=333 "$entry") exist, do you want overwrite it?"
    then
      return
    fi
  fi
  gum confirm "Do you want autogenerate password?"
  passgen="$?"
  if [[ "$passgen" == 1 ]]
  then
    password=$(gum input --placeholder "Enter password for $entry" --password)
    password_again=$(gum input --placeholder "Retype password for $entry" --password)
    if [[ "$password" == "$password_again" ]]
    then
      mkdir -p "$PREFIX/$(dirname "$entry")"
      echo "$password" | age -e -R "$recipientfile" $recipients > "$PREFIX/$entry" || exit 1
    else
      gum style --foreground f00 --bold "Passwords do not match. Entry not added."
      gum input
      return
    fi
  else
    mkdir -p "$PREFIX/$(dirname "$entry")"
    passgen | age -e -R "$recipientfile" $recipients > "$PREFIX/$entry" || exit 1
  fi
  echo "Password for $(gum style --foreground 333 "$entry") added."
  gum input
}

show() {
  local choice
  [[ -e "$KEYFILE" ]] || killme "ERROR: Keyfile not exist."
  if [[ -z "$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null)" ]]
  then
    gum style --foreground f00 --bold "Age Secret Store is empty!"
  else
    choice=$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null | sed -e "s#${PREFIX}/\{0,1\}##" | sort | gum filter)
    echo "The password of $(gum style --foreground=212 "$choice"): $(gum style --foreground=333 "$(age -d -i "$KEYFILE" "$PREFIX/$choice")")"
  fi
  gum input
}

copy() {
  local choice
  [[ -e "$KEYFILE" ]] || killme "ERROR: Keyfile not exist."
  if [[ -z "$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null)" ]]
  then
    gum style --foreground f00 --bold "Age Secret Store is empty!"
    gum input
  else
    choice=$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null | sed -e "s#${PREFIX}/\{0,1\}##" | sort | gum filter)
    just_copy "$(age -d -i "$KEYFILE" "$PREFIX/$choice")" "$choice" || exit 1
  fi
}

just_copy() {
  local options copycommand clearcommand protect=0 tmout="$TIMEOUT"
  options="$(getopt -o p -l protect -n "$PROGRAM" -- "$@")"
  eval set -- "$options"
  while true
  do
    case "$1" in
      -p|--protect) protect=1; shift ;;
      --) shift; break
    esac
  done
  # set clipboard commands
  if [[ "$XDG_SESSION_DESKTOP" == KDE ]]
  then
    copycommand="qdbus org.kde.klipper /klipper org.kde.klipper.klipper.setClipboardContents"
    clearcommand="qdbus org.kde.klipper /klipper org.kde.klipper.klipper.clearClipboardHistory"
  elif [[ "$XDG_SESSION_TYPE" == wayland ]]
  then
    copycommand="wl-copy"
    clearcommand="wl-copy -c"
  elif [[ "$XDG_SESSION_TYPE" == x11 ]]
  then
    copycommand="xclip -selection clipboard"
    clearcommand="xsel -cb"
  fi
  command -v $copycommand &> /dev/null || killme "ERROR: Clipboard unupported"
  command -v $clearcommand &> /dev/null || killme "ERROR: Clipboard unupported"
  # copying & timeout
  eval $copycommand "$1"
  while [[ "$tmout" -ge 1 ]]
  do
    if [[ "$protect" == 0 ]]
    then
      echo -ne "$(gum style --foreground 212 "$2") copied, clipboard will reset in $(gum style --foreground 333 "$tmout") second\033[0K\r"
    else
      echo -ne "Password copied, clipboard will reset in $(gum style --foreground 333 "$tmout") second\033[0K\r"
    fi
    sleep 1
    (( tmout-- ))
  done
  eval $clearcommand
  echo -e "$(gum style --foreground f00 --bold "Clipboard cleared")\033[0K\r"
}

remove() {
  if [[ -z "$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null)" ]]
  then
    gum style --foreground f00 --bold "Age Secret Store is empty! Cannot remove anything!"
    gum input
  else
    choice=$(find -L "$PREFIX" \( -name ".*" \) -o -type f -print 2>/dev/null | sed -e "s#${PREFIX}/\{0,1\}##" | sort | gum filter)
    if gum confirm "Are you sure you want remove $choice"
    then
      assfile="$PREFIX/$choice"
      rm -f "$assfile"
      rmdir --ignore-fail-on-non-empty -p "${assfile%/*}" 2> /dev/null
      gum style --foreground f00 --bold "Entry removed!"
      gum input
    fi
  fi
}

list() {
  gum style --bold "Age Secret Store"
  tree -N -C -l --noreport "$PREFIX" | tail -n +2
  gum input
}

passgen() {
  local length=20 pwgenopts="-y"
  gum confirm "Include special characters to password?" || pwgenopts=""

  length=$(gum input --prompt "$(gum style --bold "Password lenghth: ")" --value "$length")
  while ! [[ $length =~ ^[0-9]+$ ]]
  do
    length=$(gum input --prompt "$(gum style --bold "Password lenghth: ")" --placeholder "Password length must be a number")
  done
  [[ $length =~ ^[0-9]+$ ]] || killme "Password length must be a number."

  pwgen -1s $pwgenopts $length
}

killme() {
  >&2 gum style --foreground f00 --bold "$1"
  exit 1
}

############# Main program #####################

[[ -e "$PREFIX" ]] || init
while true
do
  clear
  gum style --foreground 333 --border-foreground 212 --border double --align center --width 50 --margin "1 2" --padding "2 4" 'Age Secret Store' 'No more pain in ass!'
  case $(gum choose "Add password" "Show password" "Copy password" "Remove password" "List entries" "Destroy Age Secret Store" "Generate password" "Exit")
  in
    "Add password") add ;;
    "Show password") show ;;
    "Copy password") copy ;;
    "Remove password") remove ;;
    "List entries") list ;;
    "Destroy Age Secret Store")
      gum confirm "Are you absolutely sure you want remove all Age Secret Store?" && rm -r -f -v "$PREFIX" && exit 0 || gum style --bold "Operation cancelled." && gum input 
      ;;
    "Generate password") just_copy -p passgen 
      gum input ;;
    *) clear; exit 0
  esac
done
